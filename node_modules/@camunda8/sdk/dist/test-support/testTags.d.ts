/**
 * Test environment selection utilities (Matrix + Exclude model)
 *
 * BREAKING CHANGE: Previous TagFilter / matrix(filterObjectReturningBoolean) semantics removed.
 * New primary APIs:
 *   - matrix({ include: { versions: ['8.8','8.7'], deployments: ['saas','self-managed'] }, exclude: [{ version: '8.8', deployment: 'self-managed' }] })
 *   - allowAny([{ version: '8.7' }, { version: '8.8', deployment: 'saas' }])
 *   - matrix(predicate) -> returns boolean for use with Vitest test.if(matrix(...))
 *
 * Semantics:
 *   matrix(): Produces the cartesian product of provided include dimension arrays. Any dimensions omitted are treated as wildcards (not expanded).
 *             Exclusion patterns (partial matches) remove matching tuples.
 *   allowAny(): Returns true if the current environment matches ANY provided partial pattern.
 *   matrix(): Just invokes the predicate with the current environment and returns a boolean (thin wrapper for clarity / future debug hooks).
 *
 * Example (run on 8.7 all deployments + 8.8 saas only):
 *   const pred = matrix({
 *     include: { versions: ['8.7','8.8'], deployments: ['saas','self-managed'] },
 *     exclude: [{ version: '8.8', deployment: 'self-managed' }]
 *   })
 *   // In a test file (Vitest):
 *   // test.if(matrix(pred))('my test', () => { ...test logic })
 *
 * Example using allowAny (same intent):
 *   const pred = allowAny([{ version: '8.7' }, { version: '8.8', deployment: 'saas' }])
 *   test.if(matrix(pred))('my test', () => {})
 *
 * Debugging: set TEST_TAG_DEBUG=1 to log evaluation decisions.
 */
export declare const VersionTags: {
    readonly "8.8": "8.8";
    readonly "8.7": "8.7";
};
export type VersionTag = (typeof VersionTags)[keyof typeof VersionTags];
declare const DeploymentModeTags: {
    readonly saas: "saas";
    readonly selfManaged: "self-managed";
    readonly unitTest: "unit-test";
};
export type DeploymentModeTag = (typeof DeploymentModeTags)[keyof typeof DeploymentModeTags];
declare const TenancyTags: {
    readonly multiTenant: "multi-tenant";
    readonly singleTenant: "single-tenant";
};
export type TenancyTag = (typeof TenancyTags)[keyof typeof TenancyTags];
declare const SecurityTags: {
    readonly secured: "secured";
    readonly unsecured: "unsecured";
};
export type SecurityTag = (typeof SecurityTags)[keyof typeof SecurityTags];
export declare const TestTags: {
    secured: "secured";
    unsecured: "unsecured";
    multiTenant: "multi-tenant";
    singleTenant: "single-tenant";
    saas: "saas";
    selfManaged: "self-managed";
    unitTest: "unit-test";
    "8.8": "8.8";
    "8.7": "8.7";
};
export interface TestEnvironment {
    version: VersionTag;
    deployment: DeploymentModeTag;
    tenancy: TenancyTag;
    security: SecurityTag;
}
export type EnvPattern = Partial<TestEnvironment>;
export interface MatrixInclude {
    versions?: VersionTag[];
    deployments?: DeploymentModeTag[];
    tenancy?: TenancyTag[];
    security?: SecurityTag[];
}
export interface MatrixRules {
    include: MatrixInclude;
    exclude?: EnvPattern[];
}
export declare const currentEnv: () => TestEnvironment;
export declare function matrix(rules: MatrixRules): boolean;
export declare function allowAny(patterns: EnvPattern[]): boolean;
export declare function tagged(predicate: (env: TestEnvironment) => boolean): boolean;
export { DeploymentModeTags as DeploymentTags, SecurityTags, TenancyTags };
