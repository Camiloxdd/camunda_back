"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cancelProcesses = cancelProcesses;
const c8_1 = require("../../c8");
const operate_1 = require("../../operate");
const operate = new operate_1.OperateApiClient();
const camunda = new c8_1.Camunda8().getCamundaRestClient();
const topology = camunda.getTopology();
async function cancelProcesses(processDefinitionKey) {
    const { searchProcessInstances, cancelProcessInstance } = (await topology).gatewayVersion.includes('8.8')
        ? {
            searchProcessInstances: camunda.searchProcessInstances.bind(camunda),
            cancelProcessInstance: (pid) => camunda.cancelProcessInstance({ processInstanceKey: pid }),
        }
        : {
            searchProcessInstances: operate.searchProcessInstances.bind(operate),
            cancelProcessInstance: operate.deleteProcessInstance.bind(operate),
        };
    const processes = await searchProcessInstances({
        filter: {
            processDefinitionKey,
            state: 'ACTIVE',
        },
    }).catch((e) => {
        console.log(`Failed to search for process instances for ${processDefinitionKey}`);
        console.log(e);
    });
    if (processes) {
        await Promise.all(processes.items.map((item) => {
            return cancelProcessInstance(item.key ?? item.processInstanceKey).catch(() => { } // Swallow exception
            );
        }));
    }
}
//# sourceMappingURL=cancelProcesses.js.map